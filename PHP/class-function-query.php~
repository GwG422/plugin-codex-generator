<?php

function plugincodex_get_functions( $args=array() ){

	$plugin = get_option('plugin-codex_plugin');

	$args = array_merge( array(
		'functions__in'=>false,
	),$args);

	$query = new PCG_Function_Query($args);
	return $query->get_results();

}


class PCG_Function_Query extends Codex_Generator_Utility {

	static $user_functions;

	public $args;
	public $count;

	function __construct($args=array()) {

		if( !empty($args['version_compare']) )
			$args['version_compare'] = self::sanitize_compare($args['version_compare']);

		$this->args = wp_parse_args($args, array(
											 's' => false,
											 'match' => 'fuzzy',
											 'version' => false,
											 'version_compare' => '=',
											 'path' => false,
											'functions__in'=>array(),
											 'orderby' => 'name',
											 'order' => 'asc',
											 'number' => -1,
											 'offset' => 0,
											 'return' => 'name',
											'skip_private'=>true,
											'functions__in'=>false,
										   ));


	}

	function get_results() {
		$args = $this->args;


		$plugin = get_option('plugin-codex_plugin');

		$files = get_plugin_files($plugin);
		$files = array_filter( plugincodex_get_plugin_path($files) ,'plugincodex_filter_php_file');
			
		$results =array();
		foreach( $files as $file ){
			$new_results = self::parse_file($file);
			if( $new_results )
				$results = array_merge($results, $new_results );
		}

		print_r($results);

		$results = array_filter($results, array(&$this,'array_filter'));

		print_r($results);

		usort($results, array(&$this, 'usort'));

		$this->count = count($results);

		if ('desc' == $args['order'])
			$results = array_reverse($results);

		if ($args['number'] > 0)
			$results = array_slice($results, $args['offset'], $args['number']);

		return $results;
	}

	function parse_file( $file ){
		extract($this->args);
		try{
			$reflect = new PHP_Reflect();
		    	$reflect->scan($file);

		} catch (Exception $e) {
			    continue;
		}

		$_functions = $reflect->getFunctions();

		if( !$_functions )
			return array();

		$_functions = array_pop($_functions);

		$functions =array();
		foreach( $_functions as $name => $_function ){
			if( !empty($functions__in) && !in_array($name, $functions__in) ){
				continue;
			}

			if( isset($functions[$name]) )
				continue;

			$function = self::parse_function($_function);
			$function['name'] = $name;
			$functions[$name]  = $function;
		}
		return $functions;
	}

	function parse_function( $_function ){
		$function = array();
		$function['path'] = isset($_function['file']) ? Codex_Generator_Phpdoc_Parser::sanitize_path($_function['file']): false;
		$function['line'] = absint($_function['startLine']);
	

		/* Parse the docblock and merge into details from PHPReflect */
		$doc = $_function['docblock'];
		$doc = Codex_Generator_Phpdoc_Parser::parse_doc($doc);
		$function['has_doc'] = !empty($doc);
		$function = array_merge($function, $doc);

		/* Parse params from PHPReflect and merge with details from the docblock */
		$params = Codex_Generator_Phpdoc_Parser::parse_params( $_function['arguments'] );
		$function['parameters'] = Codex_Generator_Phpdoc_Parser::merge_params( $params, $doc['tags']['param']);		
		unset($function['tags']['param']);

		/* Handle the @deprecated tag */
		if( isset($function['tags']['deprecated']) ){

			//If function is superceded by a new one, this should be marked with @see
			$replacement = isset($function['tags']['see']) ? trim($function['tags']['see'],'()') : false;
				       
			//Note: $output['tags']['deprecated'] will be TRUE if @deprecated tag is present but has no value
			$value = is_string($function['tags']['deprecated']) ? $function['tags']['deprecated'] : false;
			list($version, $description) = Codex_Generator_Phpdoc_Parser::explode(' ', $value, 2, false);
			
			if( $version )
				$version = Codex_Generator_Phpdoc_Parser::trim_version( Codex_Generator_Phpdoc_Parser::sanitize_version($version));

			$function['deprecated'] = compact('version','description','replacement');
			unset($function['tags']['deprecated']);
		}

		/* Handle the @since tag */
		if( isset($function['tags']['since']) ) {

			$version = Codex_Generator_Phpdoc_Parser::trim_version( Codex_Generator_Phpdoc_Parser::sanitize_version($function['tags']['since']) );

			if( !empty($version) ) {
				$function['tags']['since'] = $version;
			}
		}
		Codex_Generator_Phpdoc_Parser::$paths[] = $function['path'];
		return $function;		
	}


	function get_names() {

		$functions =  plugincodex_get_functions();

		foreach( $functions as $key => $function )
			if( false === strpos($function['name'], $this->args['s']) )
				unset($functions[$key]);

		return array_slice(wp_list_pluck($functions,'name'), 0, $this->args['number']);
	}

	function get_array( $function ) {

		return Codex_Generator_Phpdoc_Parser::parse($function);
	}

	function array_filter($function) {

		if( !empty( $this->args['s'] ) ){
			if ('fuzzy' == $this->args['match']) {

				if( false === strpos($function['name'], $this->args['s']) )
					return false;
			}
			else {
				
				if( 0 !== strpos($function, $this->args['s']) );
					return false;
			}
		}

		if( !empty($this->args['functions__in']) ){
			if( !in_array($function['name'], $this->args['functions__in']) ){
				return false;
			}
		}


		if( !empty($this->args['skip_private']) ){
			if( !empty($function['tags']['access']) && 'private' == $function['tags']['access'] )
				return false;
		}

		if( !empty($this->args['version']) )
			if( empty($function['tags']['since']) )
				return false;
			else
				return version_compare($function['tags']['since'], $this->args['version'],  $this->args['version_compare']);

		if( !empty($this->args['path']) ){
			if( 0 !== strpos($function['path'], $this->args['path']) )
				return false;
		}

		if( 'version' == $this->args['orderby'] && empty($function['tags']['since']) )
			return false;

		return true;
	}


	function usort($first, $second) {

		switch( $this->args['orderby'] ) {

			case 'name':
				return strcmp($first['name'], $second['name']);
			break;

			case 'match':
				$pos_first = strpos($first['name'], $this->args['s']);
				$pos_second = strpos($second['name'], $this->args['s']);

				if ($pos_first != $pos_second)
					return $pos_first > $pos_second ? 1 : -1;

				return strcmp($first['name'], $second['name']);

			break;

			case 'version':
				return version_compare($first['tags']['since'], $second['tags']['since']);
			break;

			case 'file':
				return strcmp($first['path'], $second['path']);
			break;
		}

		return 0;
	}
}
