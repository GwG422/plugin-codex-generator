<?php

if (!class_exists('WP_List_Table'))
	require_once(ABSPATH . 'wp-admin/includes/class-wp-list-table.php');

class Codex_Generator_Hooks_Table extends WP_List_Table {

	function __construct() {

		/*parent::__construct(array(
								 'singular' => 'function',
								 'plural' => 'functions',
								 'ajax' => false,
							));*/
    }

	function prepare_items() {

		$per_page = (int) get_user_option( Codex_Generator::$hook_suffix.'_per_page');

		if( empty($per_page) )
			$per_page = 20;

		$current_page = $this->get_pagenum();
		$offset = $current_page > 1 ? $per_page*($current_page-1) : 0;

		$query = array(
			'number' => $per_page,
			'return' => 'array',
			'offset' => $offset,
		);

		foreach( array('s','orderby','order','version','version_compare','path') as $arg )
			if( isset($_GET[$arg]) )
				$query[$arg] = esc_attr($_GET[$arg]);

		$data = plugincodex_get_hooks();

		$total_items = count($data);
		$this->items = $data;
		$this->set_pagination_args( array(
	            'total_items' => $total_items,
        	    'per_page'    => $per_page,
        	    'total_pages' => ceil($total_items/$per_page),
        	) );
		$this->_args = array();
	}

	function display_tablenav( $which ) {
?>
	<div class="tablenav <?php echo esc_attr( $which ); ?>">
<?php
		$this->extra_tablenav( $which );
		$this->pagination( $which );
?>

		<br class="clear" />
	</div>
<?php
	}

	function extra_tablenav($which) {
	}



	function get_columns(){

		$columns = array(
			'cb' => '<input type="checkbox" />',
			'name' => __('Name', 'codex_gen'),
			'arguments' => __('Arguments', 'codex_gen'),
		);

        return $columns;
    }

	function get_sortable_columns() {
        $sortable_columns = array(
            'name'     => array('name', empty( $_GET['orderby'] ) ),
            'version'    => array('version',false),
            'file'    => array('file',false),
        );
        return $sortable_columns;
    }

	function column_name($item) {
		$name = esc_html(trim($item['name'],'"\''));

		return "<span class='code'>{$name}</span>";
	}


	function column_default($item) {

		return "";
	}


	function column_arguments($item) {

		$output = count($item['parameters']);
		$output = "<span class='code'>{$output}</span>";

		return $output;
	}

	function column_return($item) {

		if(!empty($item['tags']['return'])) {

			list($type, $description) = Codex_Generator_Utility::explode(' ', $item['tags']['return'], 2, '');
			$type = esc_html(Codex_Generator_Utility::type_to_string($type));
			$description = esc_html($description);
			return "<span class='code'><em>({$type})</em></span> {$description}";
		}

		return '';
	}


	function column_file($item) {

		$file = Codex_Generator_Utility::sanitize_path($item['path']);
		$segments = explode('/', $file);
		$links = array();
		$pos = 0;

		foreach( $segments as $segment ) {

			$pos++;
			$anchor = $segment;
			$path = implode('/', array_slice($segments,0,$pos));
			$link = add_query_arg('path', $path, CODEX_GENERATOR_LINK);
			$links[] = "<a href='{$link}'>{$anchor}</a>";
		}

		$line = !empty($item['line']) ? ' #L'.intval($item['line']) : '';

		return implode( ' / ', $links ).$line;
	}

	/*
	* Checkbox column for Bulk Actions.
	* 
	* @see WP_List_Table::::single_row_columns()
	* @param array $item A singular item (one full row's worth of data)
	* @return string Text to be placed inside the column <td> (movie title only)
	*/
	function column_cb($item){
        	return sprintf(
	            '<input type="checkbox" name="%1$s[]" value="%2$s" />',
        	    /*$1%s*/ 'function',  
        	    /*$2%s*/ $item['name']       //The value of the checkbox should be the record's id
        	);
    	}

	function column_links($item) {

		global $wp_version;

		$name = esc_html($item['name']);
		$output = Codex_Generator_Utility::get_codex_link($name, __('Codex', 'codex_gen'));
		$output .= ' | ';
		$file = esc_html(Codex_Generator_Utility::sanitize_path($item['path']));
		$link = esc_url('http://core.trac.wordpress.org/browser/tags/' . $wp_version . '/' . $file . '#L' . $item['line']);
		$title = esc_attr(sprintf(__('Browse %s on Trac', 'codex_gen'), $file));
		$anchor = __('Trac', 'codex_gen');
		$output .= "<a href='{$link}' title='{$title}'>{$anchor}</a>";

		return $output;
	}

	function column_get($item) {

		$name = $item['name'];
		$href = admin_url('admin-ajax.php');

		$query = array(
			'action' => 'codex_gen_wiki',
			'function' => esc_attr($name),
			'width' => 800,
			'height' => 500,
		);

		$href = esc_url(add_query_arg($query, $href));
		$anchor = esc_html(__('Wiki','codex_gen'));
		$title = esc_attr(sprintf(__('Wiki page markup for %s()',''), $name));

		$page ='';
		if( $posts = get_posts(array('post_type'=>'page','post_status'=>'any','name'=>sanitize_title($item['name']))) ){
			$page = $posts[0];
			$page = sprintf('<a target="_blank" href="%s"> Page </a> | ', get_permalink($page));
		}

		return $page."<a href='{$href}' class='thickbox' title='{$title}'>{$anchor}</a>";
	}
}
